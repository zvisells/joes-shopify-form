{%- liquid
  assign form_id = 'custom-form-' | append: section.id
  assign recipient_email = section.settings.recipient_email | default: shop.email
  assign subject_line = section.settings.subject_line | default: 'New Form Submission'
-%}

<div class="custom-form-section color-{{ section.settings.color_scheme }} gradient">
  <div class="page-width section-{{ section.id }}-padding">
    {% if section.settings.heading != blank %}
      <h2 class="custom-form-heading inline-richtext {{ section.settings.heading_size }}">
        {{ section.settings.heading }}
      </h2>
    {% endif %}
    
    {% if section.settings.description != blank %}
      <div class="custom-form-description rte">
        {{ section.settings.description }}
      </div>
    {% endif %}

    <form 
      id="{{ form_id }}" 
      class="custom-form" 
      method="POST" 
      action="{% if section.settings.webhook_url != blank %}{{ section.settings.webhook_url }}{% else %}{{ routes.root_url }}contact{% endif %}"
      novalidate
      onsubmit="console.log('Form submitted via HTML!');"
    >
      <input type="hidden" name="form_type" value="webhook_form">
      <input type="hidden" name="utf8" value="✓">
      <input type="hidden" name="contact[subject]" value="{{ subject_line }}">
      <input type="hidden" name="contact[timestamp]" value="">

      <div class="custom-form-fields">
        {% for block in section.blocks %}
          {% liquid
            assign field_width = block.settings.field_width | default: 100
            assign field_required = block.settings.required | default: false
            assign field_id = form_id | append: '-field-' | append: forloop.index
          %}
          
          <div class="custom-form-field" style="width: {{ field_width }}%;" data-field-type="{{ block.type }}">
            {% case block.type %}
              {% when 'text' %}
                <label for="{{ field_id }}" class="custom-form-label">
                  {{ block.settings.label }}
                  {% if field_required %}<span class="required">*</span>{% endif %}
                </label>
                <input 
                  type="text" 
                  id="{{ field_id }}"
                  name="contact[{{ block.settings.name | default: block.settings.label | handleize }}]"
                  placeholder="{{ block.settings.placeholder }}"
                  class="custom-form-input"
                  {% if field_required %}required{% endif %}
                >

              {% when 'email' %}
                <label for="{{ field_id }}" class="custom-form-label">
                  {{ block.settings.label }}
                  {% if field_required %}<span class="required">*</span>{% endif %}
                </label>
                <input 
                  type="email" 
                  id="{{ field_id }}"
                  name="contact[{{ block.settings.name | default: 'email' }}]"
                  placeholder="{{ block.settings.placeholder }}"
                  class="custom-form-input"
                  {% if field_required %}required{% endif %}
                >

              {% when 'textarea' %}
                <label for="{{ field_id }}" class="custom-form-label">
                  {{ block.settings.label }}
                  {% if field_required %}<span class="required">*</span>{% endif %}
                </label>
                <textarea 
                  id="{{ field_id }}"
                  name="contact[{{ block.settings.name | default: block.settings.label | handleize }}]"
                  placeholder="{{ block.settings.placeholder }}"
                  class="custom-form-textarea"
                  rows="{{ block.settings.rows | default: 4 }}"
                  {% if field_required %}required{% endif %}
                ></textarea>

              {% when 'dropdown' %}
                <label for="{{ field_id }}" class="custom-form-label">
                  {{ block.settings.label }}
                  {% if field_required %}<span class="required">*</span>{% endif %}
                </label>
                <select 
                  id="{{ field_id }}"
                  name="contact[{{ block.settings.name | default: block.settings.label | handleize }}]"
                  class="custom-form-select"
                  {% if field_required %}required{% endif %}
                >
                  <option value="">{{ block.settings.placeholder | default: 'Select an option' }}</option>
                  {% assign options = block.settings.options | split: ',' %}
                  {% for option in options %}
                    <option value="{{ option | strip }}">{{ option | strip }}</option>
                  {% endfor %}
                </select>

              {% when 'checkbox_multi' %}
                <fieldset class="custom-form-fieldset">
                  <legend class="custom-form-label">
                    {{ block.settings.label }}
                    {% if field_required %}<span class="required">*</span>{% endif %}
                  </legend>
                  {% assign options = block.settings.options | split: ',' %}
                  {% for option in options %}
                    {% assign checkbox_id = field_id | append: '-' | append: forloop.index %}
                    <div class="custom-form-checkbox-wrapper">
                      <input 
                        type="checkbox" 
                        id="{{ checkbox_id }}"
                        name="contact[{{ block.settings.name | default: block.settings.label | handleize }}]"
                        value="{{ option | strip }}"
                        class="custom-form-checkbox"
                        data-group="{{ block.settings.name | default: block.settings.label | handleize }}"
                      >
                      <label for="{{ checkbox_id }}" class="custom-form-checkbox-label">
                        {{ option | strip }}
                      </label>
                    </div>
                  {% endfor %}
                </fieldset>

              {% when 'boolean' %}
                <div class="custom-form-boolean-wrapper">
                  <input 
                    type="checkbox" 
                    id="{{ field_id }}"
                    name="contact[{{ block.settings.name | default: block.settings.label | handleize }}]"
                    value="true"
                    class="custom-form-checkbox"
                    {% if field_required %}required{% endif %}
                  >
                  <label for="{{ field_id }}" class="custom-form-checkbox-label">
                    {{ block.settings.label }}
                    {% if field_required %}<span class="required">*</span>{% endif %}
                  </label>
                </div>

              {% when 'product_search' %}
                <div class="custom-form-field">
                  <label for="{{ field_id }}" class="custom-form-label">{{ block.settings.label }}{% if field_required %}<span class="required">*</span>{% endif %}</label>
                  <div class="custom-form-product-search-wrapper">
                    <div class="custom-form-product-search" data-field-id="{{ field_id }}">
                      <input type="text" id="{{ field_id }}" class="custom-form-product-search-input" placeholder="{{ block.settings.placeholder | default: 'Search for a product...' }}" autocomplete="off" {% if field_required %}required{% endif %}>
                      <div class="custom-form-product-results" style="display: none;"></div>
                      <div class="custom-form-selected-product" style="display: none;">
                        <div class="selected-product-info">
                          <span class="selected-product-title"></span>
                          <span class="selected-product-variant"></span>
                        </div>
                        <button type="button" class="clear-selection">×</button>
                      </div>
                      <input type="hidden" name="contact[{{ block.settings.name | default: block.settings.label | handleize }}]" class="product-data-input">
                    </div>
                  </div>
                </div>

            {% endcase %}
          </div>
        {% endfor %}
      </div>

      <div class="line-items-section">
        <h3 class="line-items-heading">Quote Items</h3>
        <div id="line-item-container">
          <!-- First line item serves as a template -->
          <div class="line-item">
            <div class="line-item-fields">
              <div class="custom-form-field" style="width: 25%;">
                <label>Item Title</label>
                <input type="text" name="contact[items][0][title]" class="custom-form-input" placeholder="e.g., Living Room Window">
              </div>
              <div class="custom-form-field" style="width: 15%;">
                <label>Width (in)</label>
                <input type="number" name="contact[items][0][width]" class="custom-form-input" placeholder="e.g., 72">
              </div>
              <div class="custom-form-field" style="width: 15%;">
                <label>Height (in)</label>
                <input type="number" name="contact[items][0][height]" class="custom-form-input" placeholder="e.g., 48">
              </div>
              <div class="custom-form-field" style="width: 45%;">
                  <label>Fabric</label>
                  <div class="custom-form-product-search-wrapper">
                    <div class="custom-form-product-search" data-field-id="fabric_picker_0">
                      <input type="text" class="custom-form-product-search-input" placeholder="Search for a fabric..." autocomplete="off">
                      <div class="custom-form-product-results" style="display: none;"></div>
                      <div class="custom-form-selected-product" style="display: none;">
                        <div class="selected-product-info">
                          <span class="selected-product-title"></span>
                          <span class="selected-product-variant"></span>
                        </div>
                        <button type="button" class="clear-selection">×</button>
                      </div>
                      <input type="hidden" name="contact[items][0][fabric]" class="product-data-input">
                    </div>
                  </div>
              </div>
            </div>
            <button type="button" class="remove-line-item button button--secondary">-</button>
          </div>
        </div>
        <button type="button" id="add-line-item" class="button button--secondary">Add Item (+)</button>
      </div>

      <div class="custom-form-actions">
        <button type="submit" class="custom-form-submit button button--primary">
          {{ section.settings.submit_text | default: 'Submit' }}
        </button>
      </div>


    </form>
  </div>
</div>

<style>
  .custom-form-section {
    padding: rgb(var(--color-foreground));
    background: rgba(var(--color-background));
  }

  .custom-form-heading {
    margin-bottom: 2rem;
    color: rgb(var(--color-foreground));
  }

  .custom-form-description {
    margin-bottom: 3rem;
    color: rgb(var(--color-foreground));
  }

  .custom-form-fields {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .custom-form-field {
    min-width: 250px;
    flex-shrink: 0;
  }

  .custom-form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: rgb(var(--color-foreground));
  }

  .custom-form-label .required {
    color: rgb(var(--color-accent));
    margin-left: 0.25rem;
  }

  .custom-form-input,
  .custom-form-textarea,
  .custom-form-select {
    width: 100%;
    padding: 1rem;
    border: 0.1rem solid rgba(var(--color-foreground), 0.2);
    border-radius: var(--border-radius);
    background: rgba(var(--color-background));
    color: rgb(var(--color-foreground));
    font-size: 1.4rem;
    transition: border-color 0.3s ease;
  }

  .custom-form-input:focus,
  .custom-form-textarea:focus,
  .custom-form-select:focus {
    outline: none;
    border-color: rgb(var(--color-accent));
  }

  .custom-form-textarea {
    resize: vertical;
    min-height: 10rem;
  }

  .custom-form-fieldset {
    border: none;
    padding: 0;
    margin: 0;
  }

  .custom-form-fieldset legend {
    padding: 0;
    margin-bottom: 1rem;
  }

  .custom-form-checkbox-wrapper {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }

  .custom-form-checkbox {
    width: 1.8rem;
    height: 1.8rem;
    margin-right: 1rem;
    accent-color: rgb(var(--color-accent));
  }

  .custom-form-checkbox-label {
    margin-bottom: 0;
    cursor: pointer;
  }

  .custom-form-boolean-wrapper {
    display: flex;
    align-items: center;
  }

  .custom-form-boolean-wrapper .custom-form-checkbox {
    margin-right: 1rem;
  }

  .custom-form-product-search {
    position: relative;
  }

  .custom-form-product-search-input {
    width: 100%;
    padding: 1rem;
    border: 0.1rem solid rgba(var(--color-foreground), 0.2);
    border-radius: var(--border-radius);
    background: rgba(var(--color-background));
    color: rgb(var(--color-foreground));
    font-size: 1.4rem;
    transition: border-color 0.3s ease;
  }

  .custom-form-product-search-input:focus {
    outline: none;
    border-color: rgb(var(--color-accent));
  }

  .custom-form-product-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: rgba(var(--color-background));
    border: 0.1rem solid rgba(var(--color-foreground), 0.2);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    max-height: 40rem;
    overflow-y: auto;
    z-index: 10;
    box-shadow: 0 4px 12px rgba(var(--color-foreground), 0.1);
  }

  .custom-form-product-result {
    padding: 1.5rem;
    border-bottom: 0.1rem solid rgba(var(--color-foreground), 0.1);
  }

  .custom-form-product-result:last-child {
    border-bottom: none;
  }

  .product-result-header {
    margin-bottom: 1rem;
  }

  .product-result-title {
    font-weight: 600;
    font-size: 1.4rem;
    margin-bottom: 0.25rem;
    color: rgb(var(--color-foreground));
  }

  .product-result-type {
    font-size: 1.1rem;
    color: rgba(var(--color-foreground), 0.6);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .custom-form-product-search .product-result-variants {
    display: grid !important;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)) !important;
    gap: 1rem !important;
    background: #ff0000 !important; /* TEMP DEBUG - should show red background */
  }

  .custom-form-product-search .product-result-variant {
    display: flex !important;
    gap: 1rem !important;
    padding: 1rem !important;
    background: rgba(var(--color-background)) !important;
    border: 1px solid rgba(var(--color-foreground), 0.15) !important;
    border-radius: var(--border-radius) !important;
    cursor: pointer !important;
    transition: all 0.2s ease !important;
    position: relative !important;
    user-select: none !important;
  }

  .product-result-variant:hover {
    border-color: rgba(var(--color-accent), 0.4);
    box-shadow: 0 4px 12px rgba(var(--color-accent), 0.15);
    transform: translateY(-2px);
  }

  .product-result-variant:active {
    transform: translateY(0);
    box-shadow: 0 2px 6px rgba(var(--color-accent), 0.2);
  }

  .variant-image-container {
    flex-shrink: 0;
    width: 60px;
    height: 60px;
    border-radius: calc(var(--border-radius) / 2);
    overflow: hidden;
    background: rgba(var(--color-foreground), 0.05);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .variant-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .variant-image-placeholder {
    font-size: 1rem;
    color: rgba(var(--color-foreground), 0.4);
    text-align: center;
  }

  .variant-info {
    flex: 1;
    min-width: 0;
  }

  .variant-name {
    font-weight: 500;
    font-size: 1.3rem;
    margin-bottom: 0.5rem;
    color: rgb(var(--color-foreground));
    line-height: 1.2;
  }

  .variant-details {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    font-size: 1.1rem;
    color: rgba(var(--color-foreground), 0.7);
    margin-bottom: 0.25rem;
  }

  .variant-sku {
    font-family: monospace;
    font-size: 1rem;
    background: rgba(var(--color-foreground), 0.08);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
  }

  .variant-price {
    font-weight: 600;
    color: rgb(var(--color-accent));
    font-size: 1.2rem;
  }

  .variant-unavailable {
    font-size: 1rem;
    color: #dc3545;
    font-weight: 500;
  }

  .custom-form-selected-product {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    background: rgba(var(--color-accent), 0.1);
    border: 0.1rem solid rgba(var(--color-accent), 0.2);
    border-radius: var(--border-radius);
    margin-top: 0.5rem;
  }

  .selected-product-info {
    flex: 1;
  }

  .selected-product-title {
    font-weight: 500;
    display: block;
    margin-bottom: 0.25rem;
    color: rgb(var(--color-foreground));
  }

  .selected-product-variant {
    font-size: 1.2rem;
    color: rgba(var(--color-foreground), 0.7);
  }

  .selected-product-sku {
    font-family: monospace;
    font-size: 1.1rem;
    color: rgba(var(--color-foreground), 0.6);
    margin-top: 0.25rem;
  }

  .selected-product-price {
    font-weight: 500;
    color: rgb(var(--color-accent));
    margin-top: 0.25rem;
  }

  .selected-product-content {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .selected-product-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: calc(var(--border-radius) / 2);
    flex-shrink: 0;
  }

  .selected-product-details {
    flex: 1;
    min-width: 0;
  }

  .selected-variant-name {
    font-weight: 500;
    margin-bottom: 0.25rem;
    color: rgb(var(--color-foreground));
  }

  .clear-selection {
    background: none;
    border: none;
    font-size: 1.8rem;
    cursor: pointer;
    color: rgba(var(--color-foreground), 0.7);
    padding: 0.5rem;
    line-height: 1;
    transition: color 0.2s ease;
  }

  .clear-selection:hover {
    color: rgb(var(--color-accent));
  }


  .custom-form-actions {
    text-align: center;
    margin-top: 2rem;
  }

  .custom-form-submit {
    padding: 1.5rem 3rem;
    font-size: 1.4rem;
    font-weight: 500;
    border: none;
    border-radius: var(--border-radius);
    background: rgb(var(--color-accent));
    color: rgb(var(--color-background));
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .custom-form-submit:hover {
    background: rgba(var(--color-accent), 0.9);
    transform: translateY(-0.1rem);
  }

  .custom-form-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .line-items-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(var(--color-foreground), 0.1);
  }
  .line-items-heading {
    margin-bottom: 1.5rem;
  }
  .line-item {
    display: flex;
    align-items: flex-end;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgba(var(--color-foreground), 0.05);
  }
  .line-item-fields {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    flex-grow: 1;
  }
  .remove-line-item {
    height: fit-content;
    margin-bottom: 1rem; /* Aligns with bottom of inputs */
  }
  #add-line-item {
    margin-top: 1rem;
  }


  /* Responsive adjustments */
  @media screen and (max-width: 749px) {
    .custom-form-field {
      min-width: 100%;
    }
  }

  @media screen and (max-width: 550px) {
    .custom-form-fields {
      gap: 1rem;
    }
    
    .custom-form-submit {
      width: 100%;
    }

    .product-result-variants {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .product-result-variant {
      padding: 0.75rem;
      gap: 0.75rem;
    }

    .variant-image-container {
      width: 50px;
      height: 50px;
    }

    .variant-name {
      font-size: 1.2rem;
    }

    .variant-details {
      font-size: 1rem;
      gap: 0.75rem;
    }

    .custom-form-product-results {
      max-height: 60vh;
    }
  }
</style>

<script>
  // ===========================================================================
  //  HELPER FUNCTIONS
  // ===========================================================================

  function getProductImageUrl(product, variant) {
    let imageUrl = null;

    // --- FINAL LOGIC ---
    // 1. Find the specific image for the variant by matching the variant's ID
    //    to the `variant_ids` array within the product's image list.
    if (variant && variant.id && product && product.images && product.images.length > 0) {
      const image = product.images.find(img => img.variant_ids.includes(variant.id));
      if (image && image.src) {
        imageUrl = image.src;
      }
    }

    // 2. If no variant-specific image is found, fall back to the product's first image.
    if (!imageUrl && product && product.images && product.images.length > 0 && product.images[0].src) {
      imageUrl = product.images[0].src;
    }

    // If we found a URL, format it for the desired size.
    if (imageUrl) {
      if (imageUrl.includes('?')) {
        return `${imageUrl}&width=300`;
      }
      return `${imageUrl}?width=300`;
    }

    // 3. If all else fails, return the fallback image.
    return '{{ "no-image.jpg" | asset_url }}';
  }

  function setupProductSearch(searchWrapper) {
    const input = searchWrapper.querySelector('.custom-form-product-search-input');
    const results = searchWrapper.querySelector('.custom-form-product-results');
    const selectedProduct = searchWrapper.querySelector('.custom-form-selected-product');
    const hiddenInput = searchWrapper.querySelector('.product-data-input');
    const clearButton = searchWrapper.querySelector('.clear-selection');

    let searchTimeout;
    let currentProducts = [];

    // Search input handler
    input.addEventListener('input', function() {
      const query = this.value.trim();
      
      if (query.length < 2) {
        hideResults();
        return;
      }

      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        searchProducts(query);
      }, 300);
    });

    // Clear selection handler
    clearButton.addEventListener('click', function() {
      clearSelection();
    });

    // Hide results when clicking outside
    document.addEventListener('click', function(e) {
      if (!searchWrapper.contains(e.target)) {
        hideResults();
      }
    });

    function searchProducts(query) {
      console.log('Searching for:', query);
      
      // Use Shopify's basic predictive search API (without fields parameter)
      const searchUrl = `/search/suggest.json?q=${encodeURIComponent(query)}&resources[type]=product&resources[limit]=10&resources[options][unavailable_products]=last`;
      
      fetch(searchUrl)
        .then(response => response.json())
        .then(data => {
          console.log('Predictive search API response:', data);
          
          if (!data.resources || !data.resources.results || !data.resources.results.products) {
            console.log('No products found in response');
            hideResults();
            return;
          }
          
          let products = data.resources.results.products;
          console.log('Raw products from API:', products);
          
          // Always fetch individual product details to get complete variant data
          console.log('Fetching complete product details for all products...');
          
          const productPromises = products.map(product => 
            fetch(`/products/${product.handle}.json`)
              .then(response => {
                if (!response.ok) {
                  throw new Error(`HTTP ${response.status}`);
                }
                return response.json();
              })
              .then(productData => {
                console.log(`✅ Fetched details for ${product.handle}:`, productData.product.variants.length, 'variants');
                return {
                  id: productData.product.id,
                  title: productData.product.title,
                  handle: productData.product.handle,
                  product_type: productData.product.product_type,
                  featured_image: productData.product.featured_image,  // Keep as is, but handle in mapping
                  images: productData.product.images,
                  variants: productData.product.variants.map(variant => ({  // Updated mapping here
                    id: variant.id,
                    title: variant.title,
                    sku: variant.sku || 'N/A',
                    price: variant.price ? Math.round(parseFloat(variant.price) * 100) : 0,
                    available: variant.available,
                    // Add check for image: use featured_image if available, otherwise fallback
                    image: variant.featured_image || productData.product.featured_image || { src: '' }  // Default to empty object to avoid undefined
                  }))
                };
              })
              .catch(err => {
                console.error(`❌ Error fetching ${product.handle}:`, err);
                return {
                  id: product.id,
                  title: product.title,
                  handle: product.handle,
                  variants: [{
                    id: `${product.id}-default`,
                    title: 'Default',
                    sku: 'N/A',
                    price: 0,
                    available: true,
                    image: { src: '' }  // Ensure image is at least an object
                  }]
                };
              })
          );
          
          Promise.all(productPromises)
            .then(detailedProducts => {
              console.log('🎉 All detailed products ready:', detailedProducts);
              currentProducts = detailedProducts.filter(p => p.variants.length > 0);
              displayResults(currentProducts);
            });
        })
        .catch(error => {
          console.error('❌ Predictive search error:', error);
          hideResults();
        });
    }

    function displayResults(products) {
      results.innerHTML = '';
      products.forEach(product => {
        if (product.variants && product.variants.length > 0) {
          const variantsHtml = product.variants.map(variant => {
            const imageUrl = getProductImageUrl(product, variant);
            // --- Add the data attributes back in ---
            return `
              <div class="product-result-variant" 
                data-product-id="${product.id}" 
                data-variant-id="${variant.id}" 
                data-product-title="${product.title.replace(/"/g, '&quot;')}" 
                data-variant-title="${variant.title.replace(/"/g, '&quot;')}"
                data-variant-sku="${variant.sku || 'N/A'}"
                data-variant-price="${variant.price || '0'}"
                data-variant-image="${imageUrl}">
                <img src="${imageUrl}" alt="${variant.title}" class="variant-image-container" />
                <div class="variant-details">
                  <span class="variant-name">${product.title} - ${variant.title}</span>
                </div>
              </div>
            `;
          }).join('');
          results.innerHTML += variantsHtml;
        }
      });
      results.style.display = 'block';
      addVariantClickHandlers(results);
    }

    function addVariantClickHandlers(container) {
      const variantElements = container.querySelectorAll('.product-result-variant');
      console.log(`Adding click handlers to ${variantElements.length} variants`);
      
      variantElements.forEach((variant, index) => {
        console.log(`Setting up variant ${index + 1}:`, variant.dataset);
        
        variant.addEventListener('click', function(e) {
          console.log('Variant clicked:', this.dataset);
          e.preventDefault();
          e.stopPropagation();
          
          // Add visual feedback
          this.style.background = 'rgba(var(--color-accent), 0.4)';
          
          selectProduct(
            this.dataset.productId,
            this.dataset.variantId,
            this.dataset.productTitle,
            this.dataset.variantTitle,
            this.dataset.variantSku,
            this.dataset.variantPrice,
            this.dataset.variantImage
          );
        });
        
        // Also add keyboard support
        variant.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
          }
        });
        
        // Make it focusable
        variant.setAttribute('tabindex', '0');
      });
    }

    function selectProduct(productId, variantId, productTitle, variantTitle, variantSku, variantPrice, variantImage) {
      console.log('=== SELECT PRODUCT CALLED ===');
      console.log('Parameters:', { productId, variantId, productTitle, variantTitle, variantSku, variantPrice, variantImage });
      
      // --- Find the full product and variant objects ---
      const product = currentProducts.find(p => p.id == productId);
      if (!product) { console.error('Could not find product with ID:', productId); return; }
      
      const variant = product.variants.find(v => v.id == variantId);
      if (!variant) { console.error('Could not find variant with ID:', variantId); return; }

      // Create comprehensive product data object
      const productData = {
        product_id: productId,
        variant_id: variantId,
        product_name: productTitle,
        variant_name: variantTitle,
        sku: variantSku || 'N/A',
        price: variantPrice || '0',
        image: variantImage || '',
        display_text: `${productTitle} - ${variantTitle} (SKU: ${variantSku || 'N/A'})`
      };
      
      console.log('Product data object:', productData);
      
      // Store as JSON string for form submission
      hiddenInput.value = JSON.stringify(productData);
      console.log('Hidden input value set to:', hiddenInput.value);
      
      // Update display
      console.log('Updating display elements...');
      const titleElement = selectedProduct.querySelector('.selected-product-title');
      const variantElement = selectedProduct.querySelector('.selected-product-variant');
      
      if (titleElement) {
        titleElement.textContent = productTitle;
        console.log('Title updated');
      } else {
        console.error('Title element not found');
      }
      
      if (variantElement) {
        // Use the helper function for the selected product display image
        const imageUrl = getProductImageUrl(product, variant);
        variantElement.innerHTML = `
          <div class="selected-product-content">
            ${imageUrl ? `<img src="${imageUrl}" alt="${variantTitle}" class="selected-product-image" loading="lazy">` : ''}
            <div class="selected-product-details">
              <div class="selected-variant-name">${variantTitle}</div>
              <div class="selected-product-sku">SKU: ${variantSku || 'N/A'}</div>
              ${variantPrice && variantPrice !== '0' ? `<div class="selected-product-price">$${(variantPrice/100).toFixed(2)}</div>` : ''}
            </div>
          </div>
        `;
        console.log('Variant element updated');
      } else {
        console.error('Variant element not found');
      }
      
      selectedProduct.style.display = 'flex';
      console.log('Selected product display set to flex');
      
      input.value = productData.display_text;
      console.log('Input value set to:', input.value);
      
      hideResults();
      console.log('Results hidden');
      
      console.log('=== PRODUCT SELECTION COMPLETE ===');
    }

    function clearSelection() {
      hiddenInput.value = '';
      selectedProduct.style.display = 'none';
      input.value = '';
      input.focus();
    }

    function hideResults() {
      results.style.display = 'none';
    }
  }

  function validateForm(form) {
    const requiredFields = form.querySelectorAll('[required]');
    let isValid = true;

    requiredFields.forEach(field => {
      if (field.type === 'checkbox' && field.dataset.group) {
        // For checkbox groups, check if at least one is checked
        const checkboxGroup = form.querySelectorAll(`[data-group="${field.dataset.group}"]`);
        const isChecked = Array.from(checkboxGroup).some(cb => cb.checked);
        
        if (!isChecked) {
          field.setCustomValidity('This field is required');
          isValid = false;
        } else {
          field.setCustomValidity('');
        }
      } else if (field.type === 'checkbox' && !field.checked) {
        // For single checkboxes
        field.setCustomValidity('This field is required');
        isValid = false;
      } else if (field.type !== 'checkbox' && !field.value.trim()) {
        field.setCustomValidity('This field is required');
        isValid = false;
      } else {
        field.setCustomValidity('');
      }
    });

    return isValid;
  }

  function handleCheckboxArrays(form) {
    const checkboxGroups = {};
    
    // Group checkboxes by data-group attribute
    form.querySelectorAll('input[type="checkbox"][data-group]').forEach(checkbox => {
      const groupName = checkbox.dataset.group;
      if (!checkboxGroups[groupName]) {
        checkboxGroups[groupName] = [];
      }
      if (checkbox.checked) {
        checkboxGroups[groupName].push(checkbox.value);
      }
    });

    // Create hidden inputs for checkbox groups
    Object.keys(checkboxGroups).forEach(groupName => {
      const hiddenFieldName = `contact[${groupName}]`;
      const existingHidden = form.querySelector(`input[name="${hiddenFieldName}"][type="hidden"]`);
      
      if (existingHidden) {
        existingHidden.remove();
      }

      if (checkboxGroups[groupName].length > 0) {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = hiddenFieldName;
        hiddenInput.value = checkboxGroups[groupName].join(', ');
        form.appendChild(hiddenInput);
      }

      // Disable original checkboxes to prevent duplicate submission
      form.querySelectorAll(`input[type="checkbox"][data-group="${groupName}"]`).forEach(cb => {
        cb.disabled = true;
      });
    });
  }

  function ensureEmailField(form) {
    // Check if we already have an email field
    const emailField = form.querySelector('input[name="contact[email]"]');
    if (emailField && emailField.value.trim()) {
      return; // Email field exists and has value
    }

    // Look for any email type input
    const anyEmailInput = form.querySelector('input[type="email"]');
    if (anyEmailInput && anyEmailInput.value.trim()) {
      // Create hidden field with the email value
      const hiddenEmail = document.createElement('input');
      hiddenEmail.type = 'hidden';
      hiddenEmail.name = 'contact[email]';
      hiddenEmail.value = anyEmailInput.value;
      form.appendChild(hiddenEmail);
    }
  }

  // ===========================================================================
  //  MAIN EXECUTION
  // ===========================================================================

  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('{{ form_id }}');
    if (!form) {
      console.error('Form not found!');
      return;
    }

    // --- 1. Initialize Standalone Search Pickers ---
    const standaloneSearchFields = form.querySelectorAll('.custom-form-product-search-wrapper:not(.line-item .custom-form-product-search-wrapper)');
    standaloneSearchFields.forEach(setupProductSearch);
    
    // --- 2. Initialize Dynamic Line Items ---
    const lineItemContainer = document.getElementById('line-item-container');
    const addLineItemButton = document.getElementById('add-line-item');
    if (lineItemContainer && addLineItemButton) {
      let lineItemCounter = 1;

      const updateRemoveButtons = () => {
        const removeButtons = lineItemContainer.querySelectorAll('.remove-line-item');
        if (removeButtons.length <= 1) {
          removeButtons.forEach(btn => btn.style.display = 'none');
        } else {
          removeButtons.forEach(btn => btn.style.display = 'inline-flex');
        }
      };

      addLineItemButton.addEventListener('click', function() {
        const template = lineItemContainer.querySelector('.line-item');
        const clone = template.cloneNode(true);

        clone.querySelectorAll('input[type="text"], input[type="number"], input[type="hidden"]').forEach(input => input.value = '');
        clone.querySelector('.selected-product-info .selected-product-title').textContent = '';
        clone.querySelector('.selected-product-info .selected-product-variant').textContent = '';
        clone.querySelector('.custom-form-selected-product').style.display = 'none';
        
        clone.querySelector('input[name*="[title]"]').name = `contact[items][${lineItemCounter}][title]`;
        clone.querySelector('input[name*="[width]"]').name = `contact[items][${lineItemCounter}][width]`;
        clone.querySelector('input[name*="[height]"]').name = `contact[items][${lineItemCounter}][height]`;
        clone.querySelector('.product-data-input').name = `contact[items][${lineItemCounter}][fabric]`;
        
        const productSearchWrapper = clone.querySelector('.custom-form-product-search-wrapper');
        if (productSearchWrapper) {
          setupProductSearch(productSearchWrapper);
        }

        lineItemContainer.appendChild(clone);
        lineItemCounter++;
        updateRemoveButtons();
      });

      lineItemContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-line-item')) {
          if (lineItemContainer.querySelectorAll('.line-item').length > 1) {
            e.target.closest('.line-item').remove();
            updateRemoveButtons();
          }
        }
      });

      const firstProductSearch = lineItemContainer.querySelector('.custom-form-product-search-wrapper');
      if (firstProductSearch) {
        setupProductSearch(firstProductSearch);
      }
      updateRemoveButtons();
    }

    // --- 3. Initialize Form Submission ---
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      console.log('Form submitting to:', form.action);
      console.log('Form action URL:', form.action);
      
      // Check if webhook URL is set
      if (!form.action || form.action === window.location.href || form.action.includes('/contact') && !form.action.includes('vercel.app')) {
        console.error('No webhook URL configured!');
        alert('Form is not configured with a webhook URL. Please set the webhook URL in the theme customizer.');
        return;
      }
      
      // Validate form
      if (!validateForm(form)) {
        console.error('Form validation failed');
        return;
      }
      
      // Ensure email field exists
      ensureEmailField(form);
      
      // Handle checkbox arrays
      handleCheckboxArrays(form);
      
      // Convert form to JSON object
      const formData = new FormData(form);
      const jsonData = { contact: {} };
      
      // Convert FormData to JSON
      for (let [key, value] of formData.entries()) {
        if (key.startsWith('contact[') && key.endsWith(']')) {
          const fieldName = key.slice(8, -1); // Remove 'contact[' and ']'
          jsonData.contact[fieldName] = value;
        } else {
          jsonData[key] = value;
        }
      }
      
      // Add timestamp
      jsonData.contact.timestamp = new Date().toISOString();
      
      // Log form data for debugging
      console.log('=== SHOPIFY FORM DEBUG ===');
      console.log('Form action URL:', form.action);
      console.log('JSON data:', JSON.stringify(jsonData, null, 2));
      console.log('========================');
      
      console.log('About to submit to:', form.action);
      
      // Submit via fetch (POST request with JSON)
      console.log('=== FETCH REQUEST DEBUG ===');
      console.log('Sending request to:', form.action);
      console.log('Request method:', 'POST');
      console.log('Request body type:', 'JSON');
      
      fetch(form.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(jsonData),
        mode: 'cors',
        credentials: 'omit'
      })
      .then(response => {
        console.log('=== FETCH RESPONSE DEBUG ===');
        console.log('Response status:', response.status);
        console.log('Response ok:', response.ok);
        console.log('Response headers:', response.headers);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Response data:', data);
        console.log('Form submission successful!');
        
        // Disable the form completely to prevent any further submissions
        const submitButton = form.querySelector('.custom-form-submit');
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Submitted ✓';
        }
        
        // Remove the form action to prevent Shopify from submitting again
        form.removeAttribute('action');
        
        // Remove all event listeners to prevent resubmission
        form.replaceWith(form.cloneNode(true));
        
        alert('Form submitted successfully!');
        // Don't reset the form - keep it disabled
      })
      .catch(error => {
        console.error('=== FETCH ERROR DEBUG ===');
        console.error('Fetch error:', error);
        console.error('Error message:', error.message);
        
        // Re-enable the form on error
        const submitButton = form.querySelector('.custom-form-submit');
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Submit';
        }
        
        alert('Error submitting form. Please try again. Error: ' + error.message);
      });
    });
  });
</script>

{% schema %}
{
  "name": "Custom Form",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Contact Us"
    },
    {
      "type": "select",
      "id": "heading_size",
      "label": "Heading size",
      "options": [
        {
          "value": "h2",
          "label": "Small"
        },
        {
          "value": "h1",
          "label": "Medium"
        },
        {
          "value": "h0",
          "label": "Large"
        }
      ],
      "default": "h1"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description"
    },
    {
      "type": "text",
      "id": "recipient_email",
      "label": "Recipient Email",
      "info": "Where form submissions will be sent. Defaults to store email if left blank."
    },
    {
      "type": "text",
      "id": "subject_line",
      "label": "Email Subject Line",
      "default": "New Form Submission"
    },
    {
      "type": "text",
      "id": "webhook_url",
      "label": "Webhook URL",
      "info": "Enter your Vercel webhook URL (e.g., https://your-project.vercel.app/api/contact) to send emails to your specific address."
    },
    {
      "type": "text",
      "id": "submit_text",
      "label": "Submit Button Text",
      "default": "Submit"
    },

    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "text",
      "name": "Text Field",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "Text Field"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "info": "Used for form data. Leave blank to auto-generate from label."
        },
        {
          "type": "text",
          "id": "placeholder",
          "label": "Placeholder"
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field"
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 50
        }
      ]
    },
    {
      "type": "email",
      "name": "Email Field",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "Email"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "default": "email"
        },
        {
          "type": "text",
          "id": "placeholder",
          "label": "Placeholder",
          "default": "your@email.com"
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field",
          "default": true
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 50
        }
      ]
    },
    {
      "type": "textarea",
      "name": "Textarea Field",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "Message"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "info": "Used for form data. Leave blank to auto-generate from label."
        },
        {
          "type": "text",
          "id": "placeholder",
          "label": "Placeholder"
        },
        {
          "type": "range",
          "id": "rows",
          "min": 3,
          "max": 10,
          "step": 1,
          "label": "Rows",
          "default": 4
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field"
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 100
        }
      ]
    },
    {
      "type": "dropdown",
      "name": "Dropdown Field",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "Select Option"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "info": "Used for form data. Leave blank to auto-generate from label."
        },
        {
          "type": "text",
          "id": "placeholder",
          "label": "Placeholder",
          "default": "Choose an option"
        },
        {
          "type": "textarea",
          "id": "options",
          "label": "Options",
          "info": "Separate each option with a comma",
          "default": "Option 1, Option 2, Option 3"
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field"
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 50
        }
      ]
    },
    {
      "type": "checkbox_multi",
      "name": "Multiple Checkboxes",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "Select Multiple"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "info": "Used for form data. Leave blank to auto-generate from label."
        },
        {
          "type": "textarea",
          "id": "options",
          "label": "Options",
          "info": "Separate each option with a comma",
          "default": "Option 1, Option 2, Option 3"
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field (at least one must be selected)"
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 50
        }
      ]
    },
    {
      "type": "boolean",
      "name": "Single Checkbox",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "I agree to the terms and conditions"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "info": "Used for form data. Leave blank to auto-generate from label."
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field"
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 100
        }
      ]
    },
    {
      "type": "product_search",
      "name": "Product Search",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Label",
          "default": "Select Product"
        },
        {
          "type": "text",
          "id": "name",
          "label": "Field Name",
          "info": "Used for form data. Leave blank to auto-generate from label."
        },
        {
          "type": "text",
          "id": "placeholder",
          "label": "Placeholder",
          "default": "Search for a product..."
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Required field"
        },
        {
          "type": "range",
          "id": "field_width",
          "min": 25,
          "max": 100,
          "step": 5,
          "unit": "%",
          "label": "Field width",
          "default": 100
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Custom Form",
      "blocks": [
        {
          "type": "text",
          "settings": {
            "label": "Full Name",
            "required": true,
            "field_width": 50
          }
        },
        {
          "type": "email",
          "settings": {
            "label": "Email Address",
            "required": true,
            "field_width": 50
          }
        },
        {
          "type": "dropdown",
          "settings": {
            "label": "Inquiry Type",
            "options": "General Question, Product Support, Partnership, Other",
            "required": true,
            "field_width": 50
          }
        },
        {
          "type": "textarea",
          "settings": {
            "label": "Message",
            "required": true,
            "field_width": 100
          }
        },
        {
          "type": "boolean",
          "settings": {
            "label": "I agree to receive marketing communications",
            "field_width": 100
          }
        }
      ]
    }
  ]
}
{% endschema %} 